{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","addingMovies","useState","searchedValue","setSearchedValue","setMovie","errorMassage","setErrorMassage","isLoading","setIsLoading","submitSearch","query","fetch","then","res","json","catch","Response","Error","movieFromServer","Title","Plot","Poster","imdbID","finally","htmlFor","type","id","placeholder","value","onChange","event","target","length","classNames","disabled","onClick","preventDefault","App","setMovies","find","m","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8173d844.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport './FindMovie.scss';\nimport { getMovie } from '../../api';\nimport { MovieData } from '../../types/MovieData';\nimport { ResponseError } from '../../types/ResponseError';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  addingMovies: (movie: Movie) => void,\n};\n\nexport const FindMovie: React.FC<Props> = ({ addingMovies }) => {\n  const [searchedValue, setSearchedValue] = useState('');\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [errorMassage, setErrorMassage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchedValue(event.target.value);\n    setErrorMassage('');\n  };\n\n  const preparingMovie = (movieFromServer: MovieData): Movie => {\n    return {\n      title: movieFromServer.Title,\n      description: movieFromServer.Plot,\n      imgUrl: movieFromServer.Poster !== 'N/A'\n        ? movieFromServer.Poster\n        : 'https://via.placeholder.com/360x270.png?text=no%20preview',\n      imdbUrl: `https://www.imdb.com/title/${movieFromServer.imdbID}`,\n      imdbId: movieFromServer.imdbID,\n    };\n  };\n\n  const submitSearch = () => {\n    setIsLoading(true);\n    getMovie(searchedValue).then(res => {\n      if ((res as ResponseError).Error) {\n        setErrorMassage((res as ResponseError).Error);\n      } else {\n        setMovie(preparingMovie(res as MovieData));\n      }\n    }).finally(() => setIsLoading(false));\n  };\n\n  const clearSearch = () => {\n    setSearchedValue('');\n    setMovie(null);\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input\"\n              value={searchedValue}\n              onChange={handleSearch}\n            />\n          </div>\n          {errorMassage.length && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              {errorMassage}\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames('button is-light', {\n                'is-loading': isLoading,\n              })}\n              disabled={!searchedValue.length}\n              onClick={(event) => {\n                event.preventDefault();\n                submitSearch();\n              }}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => {\n                  addingMovies(movie);\n                  clearSearch();\n                }}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n      {movie\n      && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ResponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?i=tt3896198&apikey=8f053653';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const addingMovies = (movie: Movie) => {\n    if (!movies.find(m => m.imdbId === movie.imdbId)) {\n      setMovies(prevMovies => [...prevMovies, movie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie addingMovies={addingMovies} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}